#!/usr/bin/env python3
import cv2
import os 
import json
import pyrender
import numpy as np
import sys
import trimesh
import matplotlib.pyplot as plt
import timeit
import argparse
import yaml

import platform
if platform.system() == "Linux":
    os.environ['PYOPENGL_PLATFORM'] = 'egl'


def lookAt(eye, target, up):
    # eye is from
    # target is to
    # expects numpy arrays
    f = eye - target
    f = f/np.linalg.norm(f)

    s = np.cross(up, f)
    s = s/np.linalg.norm(s)
    u = np.cross(f, s)
    u = u/np.linalg.norm(u)

    tx = np.dot(s, eye.T)
    ty = np.dot(u, eye.T)
    tz = np.dot(f, eye.T)

    m = np.zeros((4, 4), dtype=np.float32)
    m[0, :3] = s
    m[1, :3] = u
    m[2, :3] = f
    m[:, 3] = [tx, ty, tz, 1]

    return m


def load_meshes(mesh_dir, ren):
    for mesh_now in os.listdir(mesh_dir):
        mesh_path_now = os.path.join(mesh_dir, mesh_now)
        if mesh_now[-4:] != '.ply':
            continue
        mesh_id = int(mesh_now[4:-4])
        ren.add_object(mesh_id, mesh_path_now)
        mesh_id += 1   
    return ren

def render_segmap(cam_intr, r, meshes, objs_info):
    flag = False
    for obj_index, obj_info in enumerate(objs_info):
        obj_id = int(obj_info["obj_id"])

        R = np.array(obj_info["cam_R_m2c"]).reshape((3,3))
        t = np.array(obj_info["cam_t_m2c"])/1000

        trans = np.eye(4)
        trans[0:3,0:3] = R
        trans[0:3,3]= t
        T = np.eye(4)
        T[1, 1] *= -1
        T[2, 2] *= -1

        scene = pyrender.Scene()
        scene.add(meshes[obj_id], pose=trans)
        cam = pyrender.IntrinsicsCamera(*cam_intr)
        scene.add(cam, pose=T)

        color, depth = r.render(scene)
        if flag == False:
            depth_res = depth
        
            depth_res[depth != 0] = obj_id
            flag = True
        else:
            depth_res[depth != 0] = obj_id
    return  depth_res.astype(np.uint8)

def repair_segmap(config, set_dir=None, q = None):

    root_dir = os.path.dirname(os.path.dirname(set_dir))
    mesh_dir = config["models_dir"]
    mesh_col_dir = config["models_col_dir"]

    cam_json = os.path.join(root_dir, "camera.json")

    segmap_dir = os.path.join(set_dir, 'segmap')
    gt_json = os.path.join(set_dir, "scene_gt.json")

    segmap_filenames = sorted(os.listdir(segmap_dir))

    with open(cam_json, 'r') as file:
        cam_info = json.load(file)

    cam_intr = [cam_info['fx'], cam_info['fy'], cam_info['cx'], cam_info['cy']]   

    with open(gt_json, 'r') as file:
        scene_gt = json.load(file)

    meshes = {}
    meshes_col = {}
    r = pyrender.OffscreenRenderer(1280, 720)
    # for mesh_now in sorted(os.listdir(mesh_dir)):
    #     mesh_path_now = os.path.join(mesh_dir, mesh_now)
    #     mesh_path_col_now = os.path.join(mesh_col_dir, mesh_now)
    #     if mesh_now[-4:] != '.ply':
    #         continue
    #     mesh_id = int(mesh_now[4:-4])
    #     meshes[mesh_id] = pyrender.Mesh.from_trimesh(trimesh.load(mesh_path_now, file_type='ply'))
    #     meshes_col[mesh_id] = pyrender.Mesh.from_trimesh(trimesh.load(mesh_path_col_now, file_type='ply'))

    gt_infos_dict = {}

    

    if len(segmap_filenames) == 1000:
        return
    
    print(segmap_dir)
    
    for img_num, objs_info in scene_gt.items():
        print(img_num)
        for item in objs_info:
            obj_id = item['obj_id']
            filename = "obj_{:06}.ply".format(obj_id)
            if obj_id not in meshes.keys():
                print("Add: obj_id {}".format(obj_id))
                meshes[obj_id] = pyrender.Mesh.from_trimesh(trimesh.load(os.path.join(mesh_dir, filename), file_type='ply'))
                #meshes_col[obj_id] = pyrender.Mesh.from_trimesh(trimesh.load(os.path.join(mesh_col_dir, filename), file_type='ply'))
                
                

        img_num = int(img_num)
        #segmap_img = cv2.imread(os.path.join(segmap_dir, segmap_filenames[img_num]), cv2.IMREAD_UNCHANGED)
        #gt_infos = []
        depth = render_segmap(cam_intr, r, meshes, objs_info)
        name = f"{img_num:06}.png"
        cv2.imwrite(os.path.join(segmap_dir, name), depth)
    return

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('config_path', default="config.yaml", help="Path to config file")
    args = parser.parse_args()

    dirname = os.path.dirname(__file__) #TODO
    #dirname = "/home/v4r/David/BlenderProc"

    filename = "/media/christian/Backup/master/dataset/deform_dataset/pyrender.txt"

    #read config
    with open(os.path.join(dirname, args.config_path), "r") as stream:
        config = yaml.safe_load(stream)
    root_path = os.path.join(config["output_dir"], "bop_data",config["dataset_name"])

    sets_path = os.path.join(root_path, 'train_pbr')

    sets = []
    f = open(filename, "r")
    for x in f:
        sets.append(x.split(",")[0])
    f.close()

    for set in sorted(os.listdir(sets_path)):
            repair_segmap(config, os.path.join(sets_path, set))

